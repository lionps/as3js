#!/usr/bin/env node

var pjson = require('../package.json');
var fs = require('fs');
var ImportJS = global.ImportJS = require('importjs');
var OOPS = global.OOPS = require('oopsjs');
require('../runtime.js');
ImportJS.compile();
var AS3JS = ImportJS.unpack("com.mcleodgaming.as3js.AS3JS");

var VERSION = pjson.version;

//AS3JS options
var srcPaths = [];
var output = null;
var silent = false;
var verbose = false;

//Command line args
var arg = null;
var option = null;
var command = null;
var separateClasses = false;

//Misc options

//Parse arguemnts
for(var i = 0; i < process.argv.length; i++) {
	arg = process.argv[i];
	if(command) {
		//Commands will go here if implemented
		command = null;
	} else if(option) {
		//Options are set here
		if(option == 'o') {
			output = arg; //File output
		} else if(option == 'src') {
			srcPaths = srcPaths.concat(arg.split(",")); //Source path(s) to parse
		}
		option = null;
	} else {
		if(arg == '--verbose') {
			verbose = true;
		} else if(arg == '-s' || arg == '--silent') {
			silent = true;
		} else if(arg == '-o' || arg == '--output') {
			option = 'o'; //File output
		} else if(arg == '-src' || arg == '--sourcepath') {
			option = 'src'; //Source path(s)
		} else if(arg == '-sep' || arg == '--separateclasses') {
			separateClasses =  true; //Each class in its own file
		} else if(arg == '-h' || arg == '--help') {
			//Help text
			console.log("Options:");
			console.log("\t[-o|--output]\t\tOutput file");
			console.log("\t[-src|-sourcepath]\tSource Path(s) (comma-separated)");
			console.log("\t[-sep|-separateclasses]\tEach class in its own file");
			console.log("\t[-h|--help]\t\tView Help");
			console.log("\t[-v|--version]\t\tView Version information");
			
			return;
		} else if(arg == '-v' || arg == '--version') {
			//Version info
			console.log("AS3JS for Node.js");
			console.log("Created by Greg McLeod (c) 2015");
			console.log("Version: " + VERSION);
			return;
		}
	}
}

if(srcPaths.length <= 0) {
	console.log("Error, must supply source path (-src)");
} else if(!output) {
	console.log("Error, must supply output path (-o)");
} else {
	var as3js = new AS3JS();
	var options = {
		srcPaths: srcPaths,
		silent: silent,
		verbose: verbose,
		separateClasses: separateClasses
	};
	var sourceText = as3js.compile(options);
	
	//Remove old output file if it exists
	if (output)
	{
		if (fs.existsSync(output))
		{
			fs.unlinkSync(output);
		}
		fs.writeFileSync(output || 'output.js', sourceText, "UTF-8", {flags: 'w+'});

			AS3JS.log("separateClasses="+separateClasses);

		if (separateClasses) {
			var i = output.lastIndexOf('/');
			var outputPath = i >= 0 ?output.substring(0, i) :'';

			for (fullClassName in options.compiledClasses) {
				var fullClassNameParts = fullClassName.split('.');
				var filename = outputPath;
				for (var i  = 0; i < fullClassNameParts.length-1; ++i) {
					filename += fullClassNameParts[i] + '/';
					if (!fs.existsSync(filename)) {
						fs.mkdirSync(filename);
					}
				}
				filename += fullClassNameParts[fullClassNameParts.length-1] + ".js";

				console.log("Writing Class " + fullClassName + " to " + filename);
				if (fs.existsSync(filename)) {
					fs.unlinkSync(filename);
				}
				fs.writeFileSync(filename, options.compiledClasses[fullClassName], "UTF-8", {flags: 'w+'});
			}
		}
	}
}
